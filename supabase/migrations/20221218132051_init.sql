-- Create a second schema
create schema personal;

-- USERS
create type public.user_status as ENUM (
    'ONLINE',
    'OFFLINE'
);

create table public.users (
    username text primary key,
    data jsonb default null,
    age_range int4range default null,
    status user_status default 'ONLINE' ::public.user_status,
    catchphrase tsvector default null
);

alter table public.users replica identity
    full;

-- Send "previous data" to supabase
comment on column public.users.data is 'For unstructured data and prototyping.';

-- CHANNELS
create table public.channels (
    id bigint generated by default as identity primary key,
    data jsonb default null,
    slug text
);

alter table public.users replica identity
    full;

-- Send "previous data" to supabase
comment on column public.channels.data is 'For unstructured data and prototyping.';

-- MESSAGES
create table public.messages (
    id bigint generated by default as identity primary key,
    data jsonb default null,
    message text,
    username text references users not null,
    channel_id bigint references channels not null
);

alter table public.messages replica identity
    full;

-- Send "previous data" to supabase
comment on column public.messages.data is 'For unstructured data and prototyping.';

-- STORED FUNCTION
create function public.get_status (name_param text)
    returns user_status
    as $$
    select
        status
    from
        users
    where
        username = name_param;

$$
language SQL
immutable;

create function public.get_username_and_status (name_param text)
    returns table (
        username text,
        status user_status
    )
    as $$
    select
        username,
        status
    from
        users
    where
        username = name_param;

$$
language SQL
immutable;

create function public.offline_user (name_param text)
    returns user_status
    as $$
    update
        users
    set
        status = 'OFFLINE'
    where
        username = name_param
    returning
        status;

$$
language SQL
volatile;

create function public.void_func ()
    returns void
    as $$
$$
language SQL;


create extension postgis schema extensions;

create table public.shops (
    id int primary key,
    address text,
    shop_geom extensions.geometry(point, 4326)
);

create view public.non_updatable_view as
select
    username
from
    public.users
limit 1;

create view public.updatable_view as
select
    username,
    1 as non_updatable_column
from
    public.users;

-- SECOND SCHEMA USERS
create type personal.user_status as ENUM (
    'ONLINE',
    'OFFLINE'
);

create table personal.users (
    username text primary key,
    data jsonb default null,
    age_range int4range default null,
    status user_status default 'ONLINE' ::public.user_status
);

-- SECOND SCHEMA STORED FUNCTION
create function personal.get_status (name_param text)
    returns user_status
    as $$
    select
        status
    from
        users
    where
        username = name_param;

$$
language SQL
immutable;
