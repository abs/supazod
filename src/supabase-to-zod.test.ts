import { readFileSync } from 'node:fs';
import { join } from 'node:path';
import { fileURLToPath } from 'url';
import { describe, expect, it } from 'vitest';

import { generateContent, supabaseToZodOptionsSchema } from './supabase-to-zod';

const __dirname = fileURLToPath(new URL('.', import.meta.url));
const EXAMPLE_DIR = join(__dirname, '../example');

describe('supazod', () => {
  it('should generate schemas matching the example output', async () => {
    const typesFilePath = join(EXAMPLE_DIR, 'types.ts');
    const opts = supabaseToZodOptionsSchema.parse({
      input: typesFilePath,
      output: join(EXAMPLE_DIR, 'schema.ts'),
      typesOutput: join(EXAMPLE_DIR, 'schema.d.ts'),
      schema: ['public'],
      verbose: false,
    });

    const result = await generateContent(opts);

    expect(readFileSync(typesFilePath, 'utf-8')).toMatchInlineSnapshot(`
      "export type Json =
        | string
        | number
        | boolean
        | null
        | { [key: string]: Json }
        | Json[];

      export type Database = {
        public: {
          Tables: {
            users: {
              Row: {
                username: string;
                data: Json | null;
                age_range: unknown | null;
                catchphrase: unknown | null;
                status: Database['public']['Enums']['user_status'] | null;
              };
              Insert: {
                username: string;
                data?: Json | null;
                age_range?: unknown | null;
                catchphrase?: unknown | null;
                status?: Database['public']['Enums']['user_status'] | null;
              };
              Update: {
                username?: string;
                data?: Json | null;
                age_range?: unknown | null;
                catchphrase?: unknown | null;
                status?: Database['public']['Enums']['user_status'] | null;
              };
            };
          };
          Views: {
            non_updatable_view: {
              Row: {
                username: string | null;
              };
            };
          };
          Functions: {
            get_status: {
              Args: { name_param: string };
              Returns: Database['public']['Enums']['user_status'];
            };
          };
          Enums: {
            user_status: 'ONLINE' | 'OFFLINE';
          };
        };
        schema_b: {
          Tables: {
            users: {
              Row: {
                username: string;
                data: Json | null;
                status: Database['public']['Enums']['user_status'] | null;
              };
              Insert: {
                username: string;
                age_range?: unknown | null;
                catchphrase?: unknown | null;
                status?: Database['schema_b']['Enums']['user_status'] | null;
              };
              Update: {
                data?: Json | null;
                age_range?: unknown | null;
                catchphrase?: unknown | null;
                status?: Database['schema_b']['Enums']['user_status'] | null;
              };
            };
          };
          Views: {
            non_updatable_view: {
              Row: {
                username: string | null;
              };
            };
          };
          Functions: {
            get_deployment_config_schema: {
              Args: Record<PropertyKey, never>;
              Returns: Json;
            };
            get_status: {
              Args: { name_param: string };
              Returns: Database['schema_b']['Enums']['user_status'];
            };
          };
          Enums: {
            user_status: 'ONLINE' | 'OFFLINE';
          };
        };
      }
      "
    `);

    expect(result?.formatterSchemasFileContent).toMatchInlineSnapshot(`
      "// Generated by ts-to-zod
      import { z } from "zod";
      import { Json } from "./types";

      export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
        z
          .union([
            z.string(),
            z.number(),
            z.boolean(),
            z.record(jsonSchema),
            z.array(jsonSchema),
          ])
          .nullable(),
      );

      export const publicUserStatusSchema = z.union([
        z.literal("ONLINE"),
        z.literal("OFFLINE"),
      ]);

      export const publicUsersInsertSchemaSchema = z.object({
        username: z.string(),
        data: jsonSchema.optional().nullable(),
        age_range: z.unknown().optional().nullable(),
        catchphrase: z.unknown().optional().nullable(),
        status: publicUserStatusSchema.optional().nullable(),
      });

      export const publicUsersUpdateSchemaSchema = z.object({
        username: z.string().optional(),
        data: jsonSchema.optional().nullable(),
        age_range: z.unknown().optional().nullable(),
        catchphrase: z.unknown().optional().nullable(),
        status: publicUserStatusSchema.optional().nullable(),
      });

      export const publicNonUpdatableViewRowSchemaSchema = z.object({
        username: z.string().nullable(),
      });

      export const publicGetStatusArgsSchemaSchema = z.object({
        name_param: z.string(),
      });

      export const publicGetStatusReturnsSchemaSchema = publicUserStatusSchema;

      export const schemaBUserStatusSchema = z.union([
        z.literal("ONLINE"),
        z.literal("OFFLINE"),
      ]);

      export const publicUsersRowSchemaSchema = z.object({
        username: z.string(),
        data: jsonSchema.nullable(),
        age_range: z.unknown().nullable(),
        catchphrase: z.unknown().nullable(),
        status: publicUserStatusSchema.nullable(),
      });
      "
    `);
    expect(result?.formatterTypesFileContent).toMatchInlineSnapshot(`
      "// Generated by ts-to-zod
      import { z } from "zod";
      import * as generated from "./../../../../../../example/schema";
      export type Json = z.infer<typeof generated.jsonSchema>;
      export type PublicUserStatus = z.infer<typeof generated.publicUserStatusSchema>;
      export type PublicUsersInsertSchema = z.infer<
        typeof generated.publicUsersInsertSchemaSchema
      >;
      export type PublicUsersUpdateSchema = z.infer<
        typeof generated.publicUsersUpdateSchemaSchema
      >;
      export type PublicNonUpdatableViewRowSchema = z.infer<
        typeof generated.publicNonUpdatableViewRowSchemaSchema
      >;
      export type PublicGetStatusArgsSchema = z.infer<
        typeof generated.publicGetStatusArgsSchemaSchema
      >;
      export type PublicGetStatusReturnsSchema = z.infer<
        typeof generated.publicGetStatusReturnsSchemaSchema
      >;
      export type SchemaBUserstatus = z.infer<
        typeof generated.schemaBUserStatusSchema
      >;
      export type PublicUsersRowSchema = z.infer<
        typeof generated.publicUsersRowSchemaSchema
      >;
      "
    `);
  });
});
