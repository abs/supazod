import { describe, it, expect } from 'vitest';

import { replaceGeneratedComment } from './comment-utils';

describe('comment-utils', () => {
  describe('replaceGeneratedComment', () => {
    const expectedComment = `/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

`;

    it('should replace ts-to-zod comment with Supazod comment', () => {
      const source = `// Generated by ts-to-zod
// Another comment
import { z } from "zod";
import * as Types from "./types";`;

      const result = replaceGeneratedComment(source);
      expect(result).toBe(`${expectedComment}import { z } from "zod";
import * as Types from "./types";`);
    });

    it('should handle source with multi-line comments', () => {
      const source = `/* Generated by ts-to-zod
 * Multi-line comment
 */
import { z } from "zod";`;

      const result = replaceGeneratedComment(source);
      expect(result).toBe(`${expectedComment}import { z } from "zod";`);
    });

    it('should handle source without comments', () => {
      const source = `import { z } from "zod";`;

      const result = replaceGeneratedComment(source);
      expect(result).toBe(`${expectedComment}import { z } from "zod";`);
    });

    it('should handle source without imports', () => {
      const source = `// Some comment
const x = 1;`;

      const result = replaceGeneratedComment(source);
      expect(result).toBe(source);
    });

    it('should preserve whitespace around imports', () => {
      const source = `// Old comment

import { z } from "zod";

import * as Types from "./types";`;

      const result = replaceGeneratedComment(source);
      expect(result).toBe(`${expectedComment}import { z } from "zod";

import * as Types from "./types";`);
    });
  });
});
